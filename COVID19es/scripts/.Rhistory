library(moments)
install.packages("moments")
library(shiny)
library(plotly)
library(moments)
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
server()
server
dev.off()
server()
dev.off()
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
server <- function(input, output, session) {
startTime <- Sys.time()
# ...
}
View(server)
function(input, output, session) {
startTime <- Sys.time()
# ...
}
View(server)
server <- function(input, output, session) {
startTime <- Sys.time()
print(startTime)
}
server <- function(input, output, session) {
startTime <- Sys.time()
print(startTime)
}
library(shiny)
runExample("01_hello")
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='claytonfraga', token='51E6217FF8EC0642DF3F48C7A59BFFD4', secret='V+4KhPBCVdyRxMQ5nf/XmELsaTN52LdGzBRAic/Y')
load("/home/clayton/MEGA/Projetos/coronavirus/estimativa_dados_1603.RData")
require(plotly)
plotar <- function(tipo = "logistico", paises = c("Brazil","Spain", "United.States", "Italy", "World", "China", "Germany")) {
require(magrittr)
require(stringr)
cat(paste0("\n\tGerando grafico dinamico: ", paises, ", modelo:", tipo, "\n"))
hoje = Sys.Date()
for(i in 1:length(paises))  {
pais = paises[i]
dfPrevisao = read.csv(paste0("dados/datasets/",tipo,"_",tolower(pais),"_forecast_",hoje,".csv"), stringsAsFactors = F)
dfPrevisao = cbind(data.frame(location = rep("Italy", nrow(dfPrevisao))), dfPrevisao)
dfPrevisaoB = dfPrevisao[dfPrevisao$dias > as.Date("2020-03-01"),]
fig <- plot_ly(dfPrevisaoB, x = ~dias, y = ~pessimista, type = 'scatter', mode = 'lines',
line = list(color = 'transparent'),
showlegend = TRUE, name = 'Limite superior')
fig <- fig %>% add_trace(y = ~otimista, type = 'scatter', mode = 'lines',
fill = 'tonexty', fillcolor='rgba(0,100,80,0.2)', line = list(color = 'transparent'),
showlegend = TRUE, name = 'Limite inferior')
fig <- fig %>% add_trace(x = ~dias, y = ~casos_estimados, type = 'scatter', mode = 'lines+markers',
line = list(color='rgb(0,100,80)'),
name = 'Casos estimados')
fig <- fig %>% add_trace(y = ~casos_confirmados, name="Casos confirmados" , mode = 'markers')
titulo = paste0(str_replace_all(pais, "\\.", " "), " (",
format(min(dfPrevisaoB$dias), format = "%d/%m/%Y"),
" - ",
format(max(dfPrevisaoB$dias), format = "%d/%m/%Y"),
")"
)
fig <- fig %>% layout(title = titulo,
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
legend = list(x = 0.05, y = 0.95),
xaxis = list(title = "Dias",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "NÃºmero de casos",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
#    fig
pais = pais = str_replace_all(pais, "\\.", "_")
arquivo = paste0("~/MEGA/Projetos/coronavirus/dados/datasets/git/docs/",pais,"_",tipo, ".html")
htmlwidgets::saveWidget(fig,
file = arquivo,
selfcontained = TRUE,
title = str_replace_all(pais, "\\.", " ")
)
diretorio = str_replace_all(arquivo, ".html", "_files")
if (dir.exists()) {
unlink(diretorio, recursive=TRUE)
}
plotar(paises = "Germany")
install.packages("geojsonio")
install.packages("geojsonio", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("tmaptools", dependencies = TRUE)
format(Sys.time(), format = "%d/%m/%Y")
format(Sys.time(), format = "%d/%m/%Y %M")
format(Sys.time(), format = "%d/%m/%Y %H:%M")
format(Sys.time(), format = "%d/%m/%Y %H:%M:%S")
boletim = 34
url <- paste0("https://coronavirus.es.gov.br/Not%C3%ADcia/secretaria-da-saude-divulga-",boletim,"o-boletim-da-covid-19")
h <- read_html(url)
require(rvest)
url <- paste0("https://coronavirus.es.gov.br/Not%C3%ADcia/secretaria-da-saude-divulga-",boletim,"o-boletim-da-covid-19")
h <- read_html(url)
class(h)
dfDados <- h %>% html_nodes("table")
dfDados <- dfDados[[1]] %>% html_table
class(dfDados)
divs <- h %>% html_nodes("div")
string = html_text(divs[1])
data = strapplyc(string, "[0-9/]{8,}", simplify = TRUE)[1]
dfDados = cbind(data.frame(boletim = rep(boletim, nrow(dfDados))), dfDados)
dfDados = cbind(data.frame(data = rep(data, nrow(dfDados))), dfDados)
dfDados$data = as.character(dfDados$data)
require(stringr)
hoje = Sys.Date()
pastaBoletinsES = "~/MEGA/Projetos/coronavirus/dados/datasets/git/"
boletins = seq(22, 100,1)
source("funcoes.r")
require(rvest)
require(gsubfn)
require(stringr)
hoje = Sys.Date()
pastaBoletinsES = "~/MEGA/Projetos/coronavirus/dados/datasets/git/"
boletins = seq(22, 100,1)
source("funcoes.r")
require(rvest)
require(gsubfn)
setwd( "~/MEGA/Projetos/coronavirus//")
require(stringr)
hoje = Sys.Date()
pastaBoletinsES = "~/MEGA/Projetos/coronavirus/dados/datasets/git/"
boletins = seq(22, 100,1)
source("funcoes.r")
require(rvest)
require(gsubfn)
class(h)
dfDados <- h %>% html_nodes("table")
dfDados <- dfDados[[1]] %>% html_table
class(dfDados)
divs <- h %>% html_nodes("div")
string = html_text(divs[1])
data = strapplyc(string, "[0-9/]{8,}", simplify = TRUE)[1]
dfDados = cbind(data.frame(boletim = rep(boletim, nrow(dfDados))), dfDados)
dfDados = cbind(data.frame(data = rep(data, nrow(dfDados))), dfDados)
dfDados$data = as.character(dfDados$data)
dfDados$data[1] = "data"
dfDados
names(dfDados) = dfDados[1,]
names(dfDados) = fa(names(dfDados))
dfDados = tail(dfDados, nrow(dfDados)-1)
names(dfDados) = str_replace_all(names(dfDados), "[\r\n]" , "")
names(dfDados) = gsub('\\s+', '_',names(dfDados))
write.csv(dfDados, file=paste0(pastaBoletinsES,"boletim-",boletim,"-",hoje,".csv"), row.names = FALSE)
source("es2.r")
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(leaflet)
library(sf)
library(RColorBrewer)
library(tidyverse)
library(sf)
library(tidyverse)
#Dados epidemiolÃ³gicos diÃ¡rios
es.raw <- read.csv("./dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
es.epid <- es.raw[, c(1,4,3,5,6)]
names(es.epid) <- c("dia","Suspeitos","Confirmados","Descartados","Ãbitos")
es.epid$dia <- as.Date(es.epid$dia, "%Y-%m-%d")
#ProporÃ§Ã£o de casos por regiÃµes da SESA
reg.data <- data.frame(
reg = c("Metropolitana", "Central", "Norte", "Sul"),
n.sus = c(501, 111, 13, 49), #atualizar valores de suspeitos diariamente
n.con = c(104, 9, 3, 4)) #atualizar valores de confirmados diariamente
reg.data <- reg.data %>%
arrange(desc(reg)) %>%
mutate(prop.sus = n.sus / sum(reg.data$n.sus) *100) %>%
mutate(ypos.sus = cumsum(prop.sus)- 0.5*prop.sus ) %>%
mutate(prop.con = n.con / sum(reg.data$n.con) *100) %>%
mutate(ypos.con = cumsum(prop.con)- 0.5*prop.con )
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
es_df <- read_rds(file.path('./maps/', "es.mun.epi.rds"))
#Para obter os dados epidemiolÃ³gicos jÃ¡ atualizadps
es.cases.mun <- read.csv("./dados/es.cases.mun.csv", as.is = TRUE, encoding = "UTF-8")
#Juntar mapa e dados epidemiolÃ³gicos
es.mun.epi <- merge(es_df, es.cases.mun, by.x ='NM_MUNICIP', by.y = 'nome', all=T)
es.raw <- read.csv("./dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
es.raw <- read.csv("dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
setwd("/home/clayton/MEGA/Projetos/coronavirus/dados/datasets/git/COVID19es/scripts")
library(sf)
library(tidyverse)
#Dados epidemiolÃ³gicos diÃ¡rios
es.raw <- read.csv("./dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
es.epid <- es.raw[, c(1,4,3,5,6)]
names(es.epid) <- c("dia","Suspeitos","Confirmados","Descartados","Ãbitos")
es.epid$dia <- as.Date(es.epid$dia, "%Y-%m-%d")
#ProporÃ§Ã£o de casos por regiÃµes da SESA
reg.data <- data.frame(
reg = c("Metropolitana", "Central", "Norte", "Sul"),
n.sus = c(501, 111, 13, 49), #atualizar valores de suspeitos diariamente
n.con = c(104, 9, 3, 4)) #atualizar valores de confirmados diariamente
reg.data <- reg.data %>%
arrange(desc(reg)) %>%
mutate(prop.sus = n.sus / sum(reg.data$n.sus) *100) %>%
mutate(ypos.sus = cumsum(prop.sus)- 0.5*prop.sus ) %>%
mutate(prop.con = n.con / sum(reg.data$n.con) *100) %>%
mutate(ypos.con = cumsum(prop.con)- 0.5*prop.con )
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
es_df <- read_rds(file.path('./maps/', "es.mun.epi.rds"))
#Para obter os dados epidemiolÃ³gicos jÃ¡ atualizadps
es.cases.mun <- read.csv("./dados/es.cases.mun.csv", as.is = TRUE, encoding = "UTF-8")
#Juntar mapa e dados epidemiolÃ³gicos
es.mun.epi <- merge(es_df, es.cases.mun, by.x ='NM_MUNICIP', by.y = 'nome', all=T)
library(sf)
library(tidyverse)
#Dados epidemiolÃ³gicos diÃ¡rios
es.raw <- read.csv("./dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
es.epid <- es.raw[, c(1,4,3,5,6)]
names(es.epid) <- c("dia","Suspeitos","Confirmados","Descartados","Ãbitos")
es.epid$dia <- as.Date(es.epid$dia, "%Y-%m-%d")
install.packages("sf")
devtools::install_github("r-spatial/sf")
install.packages("devtools")
install.packages("devtools", dependencies = T)
devtools::install_github("r-spatial/sf")
install.packages("units", dependencies = T)
devtools::install_github("r-spatial/sf")
install.packages("units", dependencies = T)
devtools::install_github("r-spatial/sf")
library(sf)
library(tidyverse)
#Dados epidemiolÃ³gicos diÃ¡rios
es.raw <- read.csv("./dados/covides.csv", as.is = TRUE, encoding = "UTF-8")
es.epid <- es.raw[, c(1,4,3,5,6)]
names(es.epid) <- c("dia","Suspeitos","Confirmados","Descartados","Ãbitos")
es.epid$dia <- as.Date(es.epid$dia, "%Y-%m-%d")
#ProporÃ§Ã£o de casos por regiÃµes da SESA
reg.data <- data.frame(
reg = c("Metropolitana", "Central", "Norte", "Sul"),
n.sus = c(501, 111, 13, 49), #atualizar valores de suspeitos diariamente
n.con = c(104, 9, 3, 4)) #atualizar valores de confirmados diariamente
reg.data <- reg.data %>%
arrange(desc(reg)) %>%
mutate(prop.sus = n.sus / sum(reg.data$n.sus) *100) %>%
mutate(ypos.sus = cumsum(prop.sus)- 0.5*prop.sus ) %>%
mutate(prop.con = n.con / sum(reg.data$n.con) *100) %>%
mutate(ypos.con = cumsum(prop.con)- 0.5*prop.con )
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
es_df <- read_rds(file.path('./maps/', "es.mun.epi.rds"))
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
es_df <- read_rds(file.path('./maps/', ""))
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
es_df <- read_rds("maps/es_df.rds")
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
#Para obter os dados epidemiolÃ³gicos jÃ¡ atualizadps
es.cases.mun <- read.csv("./dados/es.cases.mun.csv", as.is = TRUE, encoding = "UTF-8")
#Juntar mapa e dados epidemiolÃ³gicos
es.mun.epi <- merge(es_df, es.cases.mun, by.x ='NM_MUNICIP', by.y = 'nome', all=T)
es.mun.epi
#Casos por municÃ­pios - mapa
#Para obter o mapa jÃ¡ com a informaÃ§Ã£o do tamanho da populaÃ§Ã£o
#Para obter os dados epidemiolÃ³gicos jÃ¡ atualizadps
es.cases.mun
es.mun.epi
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(leaflet)
library(sf)
library(RColorBrewer)
library(tidyverse)
################################################################################
## Parametros de formatacao comum aos plots
################################################################################
plot.formatos <- theme_bw()+
theme(axis.text= element_text(size=12, face="bold"),
axis.title.y = element_text(size=14, face="bold"))
evolucao.tipos.casos <-
es.epid %>%
filter(!is.na(Suspeitos)) %>%
gather(Suspeitos:Ãbitos, key = Classe, value = N.casos) %>%
mutate(Classe = factor(Classe, levels =c("Ãbitos", "Confirmados", "Suspeitos","Descartados"))) %>%
ggplot(aes(dia,N.casos)) +
geom_col(aes(fill=Classe)) +
scale_x_date( date_labels = "%d/%b", name="") +
ylab("NÃºmero de casos") +
ggtitle("EvoluÃ§Ã£o dos tipos de casos") +
plot.formatos
ggplotly(evolucao.tipos.casos)
evolucao.tipos.casos
bins <- c(0, 10, 50, 100, 200, 450) #adiÃ§Ã£o manual, implementar automatizaÃ§Ã£o no futuro
paleta <- colorBin("YlGnBu", domain = es.mun.epi$casos.suspeitos, bins = bins, na.color = "#808080")
points <- filter(es.mun.epi, es.mun.epi$casos.confirmados >= 1)
#paleta2 <- colorNumeric(palette = "Reds",  domain = points$casos.confirmados)
legenda <- paste(
"MunicÃ­pio: <b>", es.mun.epi$NM_MUNICIP, "</b><br/>",
"Casos suspeitos: <b>", es.mun.epi$casos.suspeitos, "</b><br/>",
"Suspeitos/mil hab: <b>", round((es.mun.epi$casos.suspeitos) *1000 / es.mun.epi$pop , 3), "</b>",
sep="") %>%
lapply(htmltools::HTML)
legenda2 <- paste(
"MunicÃ­pio: <b>", points$NM_MUNICIP, "</b><br/>",
"Casos confirmados: <b>", points$casos.confirmados, "</b><br/>",
"Confirmados/mil hab: <b>", round((points$casos.confirmados *1000) / points$pop , 3), "</b>",
sep="") %>%
lapply(htmltools::HTML)
#CÃ³digo para plotar o mapa
mapa <- leaflet(es.mun.epi) %>%
addTiles()  %>%
setView( lat=-19.6805834305246, lng=-40.527048939827665 , zoom=7) %>%
addPolygons(
fillColor = ~paleta(casos.suspeitos),
stroke=TRUE,
fillOpacity = 0.8,
color="black",
weight=0.3,
label = legenda,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addCircleMarkers(data = points, lat = ~latitude, lng = ~longitude,
color = 'red', popup = legenda2,
radius = ~sqrt(casos.confirmados)) %>%
addLegend( pal=paleta, values=~casos.suspeitos, opacity=0.9, title = "Casos suspeitos", position = "bottomleft" )
mapa
dev.off()
