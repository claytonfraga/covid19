source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("conoravirus.r")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
source("conoravirus.r")
dfSemanal
dfBrazilSemanal
dfItalySemanal
dfUSASemanal
dfUnitedStatesSemanal
dfChinaSemanal = dfSemanal[dfSemanal$location=="China",]
dfChinaSemanal
load("/home/clayton/MEGA/Projetos/coronavirus/estimativa_dados_1603.RData")
setwd("~/MEGA/Projetos/coronavirus")
dateCasos = max(read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv", stringsAsFactors = F)$date)
cat("\nData do arquivo 'total_cases.csv':", dateCasos, ", data atual: ", as.character(Sys.Date()))
#Brazil
estima(palpitesDe = "China", pais = "Brazil", ndias = dias)
estima(palpitesDe = "World", pais = "Brazil", ndias = dias, tipo="exp")
require(dplyr)
require(Fgmutils)
require(lubridate)
options(warn=-1)
setwd("~/MEGA/Projetos/coronavirus")
dfFulldata = read.csv("dados/datasets/full_data.csv", stringsAsFactors = F)
dfFulldata$date = as.Date(dfFulldata$date)
library(data.table)
DT <- as.data.table(dfFulldata)
DT[, day := sequence(.N), by = location]
dfFulldata = as.data.frame(DT)
remove(DT)
dfFulldata$week = week(dfFulldata$date)
dfFulldata[dfFulldata$week>50,]$week = 0
dfFulldata$month_year = paste0(month(dfFulldata$date), "_", year(dfFulldata$date))
dfFulldata$date = as.character(dfFulldata$date)
dfSemanal = sqldf("SELECT location, week, month_year,
max(total_cases) as total_cases
from dfFulldata
group by location, week")
dfMensal = sqldf("SELECT location, month_year,
max(total_cases) as total_cases
from dfFulldata
group by location, month_year")
dfPareadoFull = criaDadosPareados(dataFrame = dfFulldata,
campoChave = "location",
campoComparacao = "day",
camposPareados = c("date","week","month_year","total_cases", "total_deaths", "new_cases", "new_deaths"),
camposNaoPareados = "location"
)
dfPareadoFull = as.data.frame(dfPareadoFull)
dfPareadoFull$location.1 = NULL
head(dfPareadoFull)
dfFulldata$mortalidade = round((dfFulldata$total_deaths / dfFulldata$total_cases)*100, 2)
dfFulldata[dfFulldata$date==Sys.Date()-1,c("location", "mortalidade")]
write.csv(dfPareadoFull, file="dados/datasets/pareado_full.csv", row.names = F)
dfWorldMensal = dfMensal[dfMensal$location=="World",]
barplot(dfItalySemanal$total_cases~dfItalySemanal$week)
plot(dfItalySemanal$week, dfItalySemanal$total_cases)
dfBrazilSemanal = dfSemanal[dfSemanal$location=="Brazil",]
dfItalySemanal = dfSemanal[dfSemanal$location=="Italy",]
dfUnitedStatesSemanal = dfSemanal[dfSemanal$location=="United States",]
dfChinaSemanal = dfSemanal[dfSemanal$location=="China",]
options(warn=0)
dfBrazilSemanal
dfWorldMensal = dfMensal[dfMensal$location=="World",]
barplot(dfItalySemanal$total_cases~dfItalySemanal$week)
plot(dfItalySemanal$week, dfItalySemanal$total_cases)
dfSemanalBrazil = dfSemanal[dfSemanal$location=="Brazil",]
dfSemanalItaly = dfSemanal[dfSemanal$location=="Italy",]
dfSemanalUnitedStates = dfSemanal[dfSemanal$location=="United States",]
dfSemanalChina = dfSemanal[dfSemanal$location=="China",]
options(warn=0)
install.packages("plotly")
require("plotly")
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
percollege
midwest
df
dfWorldMensal = dfMensal[dfMensal$location=="World",]
barplot(dfItalySemanal$total_cases~dfItalySemanal$week)
plot(dfItalySemanal$week, dfItalySemanal$total_cases)
dfSemanalBrazil = dfSemanal[dfSemanal$location=="Brazil",]
dfSemanalItaly = dfSemanal[dfSemanal$location=="Italy",]
dfSemanalUnitedStates = dfSemanal[dfSemanal$location=="United States",]
dfSemanalChina = dfSemanal[dfSemanal$location=="China",]
options(warn=0)
dfWorldMensal = dfMensal[dfMensal$location=="World",]
barplot(dfItalySemanal$total_cases~dfItalySemanal$week)
plot(dfItalySemanal$week, dfItalySemanal$total_cases)
dfSemanalBrazil = dfSemanal[dfSemanal$location=="Brazil",]
dfSemanalItaly = dfSemanal[dfSemanal$location=="Italy",]
dfSemanalUnitedStates = dfSemanal[dfSemanal$location=="United States",]
dfSemanalChina = dfSemanal[dfSemanal$location=="China",]
options(warn=0)
dfWorldMensal = dfMensal[dfMensal$location=="World",]
barplot(dfItalySemanal$total_cases~dfItalySemanal$week)
plot(dfItalySemanal$week, dfItalySemanal$total_cases)
dfSemanalBrazil = dfSemanal[dfSemanal$location=="Brazil",]
dfSemanalItaly = dfSemanal[dfSemanal$location=="Italy",]
dfSemanalUnitedStates = dfSemanal[dfSemanal$location=="United States",]
dfSemanalChina = dfSemanal[dfSemanal$location=="China",]
options(warn=0)
dfSemanalBrazil
library(plotly)
fig <- plot_ly(dfSemanalBrazil, x = ~total_cases, color = ~location, type = "box")
fig
library(plotly)
fig <- plot_ly(dfSemanal, x = ~total_cases, color = ~location, type = "box")
fig
dfSemanalInteresse = dfSemanal[dfSemanal$location %in% c("Brazil", "Italy", "United States", "Spain"),]
dfSemanalInteresse
library(plotly)
fig <- plot_ly(dfSemanalInteresse, x = ~total_cases, color = ~location, type = "box")
fig
h)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
install.packages("dash")
install.packages("dashCoreComponents")
install.packages("dashHtmlComponents")
library(devtools)
install.packages("devtools")
require("devtools")
install.packages("usethis")
require("devtools")
install.packages("devtools")
install.packages("usethis")
install.packages("usethis", dependencies = t)
install.packages("usethis", dependencies = T)
install.packages("devtools", dependencies = T)
install.packages("usethis", dependencies = T)
install.packages("devtools", dependencies = T)
source("full_data.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
require(plotly)
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("conoravirus.r")
dev.off()
source("conoravirus.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("estima.r")
dias = 7
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "World", ndias = dias)
estima(palpitesDe = "China", pais = "World", ndias = dias)
source("conoravirus.r")
source("plot_semanal.r")
source("conoravirus.r")
source("full_data.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("plot_semanal.r")
source("full_data.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("plot_semanal.r")
plotar(tipo = "exp")
source("estima.r")
dias = 7
estima(palpitesDe = "World", pais = "Germany", ndias = dias, tipo="exp")
plotar(tipo = "exp")
dfSemanalInteresse = dfSemanal[dfSemanal$location %in% c("World"),]
dfSemanalInteresse = dfSemanalInteresse[dfSemanalInteresse$week>0,]
# #### Funciona
fig <- plot_ly(dfSemanalInteresse, x = ~week, color = ~location)
fig <- fig %>% add_trace(y = ~total_cases, name = ~location,mode = 'lines+markers', line = list(width = 3),
marker = list(symbol=~0, size=8))
titulo = paste0("Aumento do número de casos por semana (",
format(min(dfSemanalInteresse$week), format = "%d/%m/%Y"),
" - ",
format(max(dfSemanalInteresse$week), format = "%d/%m/%Y"),
")"
)
fig <- fig %>% layout(title = titulo,
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
legend = list(x = 0.05, y = 0.95),
xaxis = list(title = "Semanas",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Número de casos",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
htmlwidgets::saveWidget(fig, file = paste0("~/MEGA/Projetos/coronavirus/dados/datasets/git/docs/crescimento_semanal_mundo.html"))
estima(palpitesDe = "China", pais = "Iran", ndias = dias)
estima(palpitesDe = "World", pais = "Iran", ndias = dias, tipo="exp")
source("full_data.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("plot_semanal.r")
x = estima(palpitesDe = "World", pais = "Iran", ndias = dias, tipo="exp")
data = x$data
worldometer = x$worldometers
worldometer$country
paises = worldometer$country
paises
source("todos.r")
source("estima.r")
dev.off
dev.off()
sink()
source("estima.r")
source("todos.r")
names(data)
names(data)[grep("Korea", colnames(data))]
dadosAtuais = read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv")
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
names(full)[grep("Korea", colnames(full))]
full
full$location
full$location = as.character(full$location)
names(full)[grep("Korea", colnames(full))]
names(full)
names(full)[grep("Korea", full$location)]
full[grep("Korea", full$location),]
full[grep("Korea", full$location),][2]
full[grep("Korea", full$location),]$location[1]
names(full)[grep("Korea", colnames(full))]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
worldometer[grep("Korea", worldometer$country),]$country[1]
full$location
full
full = apply(full,location,function(x)gsub('\\s+', '.',x))
full = apply(full,2,function(x)gsub('\\s+', '.',x))
full
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full$location = apply(full$location,2,function(x)gsub('\\s+', '.',x))
gsub('\\s+', '.',full$location)
full
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full$location = gsub('\\s+', '.',full$location)
full[grep("Korea", full$location),]
full[grep("Korea", full$location),][1]
full[grep("Korea", full$location),]$locaiotn[1]
full[grep("Korea", full$location),]$location[1]
worldometer[grep("Korea", worldometer$country),]$country[1]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
full[grep("Korea", full$location),]$location[1]
worldometer[grep("Korea", worldometer$country),]$country[1]
worldometer[grep("Korea", worldometer$country),]$country =
worldometer[grep("Korea", worldometer$country),]$country
worldometer[grep("Korea", worldometer$country),]$country = full[grep("Korea", full$location),]$location[1]
worldometer[grep("Korea", worldometer$country),]$country
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
pais = South.Korea
dadosAtuais = read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv")
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full[grep("Korea", full$location),][1]
full[grep("Korea", full$location),]$location[1]
pais
names(dadosAtuais)[grep(pais, colnames(dadosAtuais))]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
dadosAtuais = read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv")
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full[grep("Korea", full$location),]$location[1]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
worldometer[grep("Korea", worldometer$country),]$country[1]
full$location = as.character(full$location)
full[grep("Korea", full$location),]$location[1]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
worldometer[grep("Korea", worldometer$country),]$country[1]
full$location = gsub('\\s+', '.',full$location)
full[grep("Korea", full$location),]$location[1]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
worldometer[grep("Korea", worldometer$country),]$country[1]
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full$location = as.character(full$location)
full[grep(" ", full$location),]$location
full = read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv")
full$location = as.character(full$location)
full[grep("South Korea", full$location),]$location
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
names(dadosAtuais)[grep(",", colnames(dadosAtuais))]
names(dadosAtuais)[grep(".", colnames(dadosAtuais))]
names(dadosAtuais)[grep("\\.", colnames(dadosAtuais))]
worldometer[grep("\\.", worldometer$country),]$country
worldometer[grep("\\ ", worldometer$country),]$country
names(dadosAtuais)[grep("French", colnames(dadosAtuais))]
names(dadosAtuais)[grep("\\.", colnames(dadosAtuais))]
names(dadosAtuais)[grep("\\ ", colnames(dadosAtuais))]
worldometer[grep("\\.", worldometer$country),]$country
worldometer[grep("\\ ", worldometer$country),]$country
unique(worldometer[grep("\\ ", worldometer$country),]$country)
names(dadosAtuais)[grep("Saudi Arabia", colnames(dadosAtuais))]
names(dadosAtuais)[grep("Saudi*Arabia", colnames(dadosAtuais))]
worldometer[grep("Saudi Arabia", worldometer$country),]$country
worldometer[grep("Saudi*Arabia", worldometer$country),]$country
(?<=Saudi)(.*)(?=Arabia)
worldometer[grep("(?<=Saudi)(.*)(?=Arabia)", worldometer$country),]$country
worldometer[grep("Saudi.*Arabia", worldometer$country),]$country
full[grep("South Korea", full$location),]$location
listaPaises = unique(worldometer[grep("\\ ", worldometer$country),]$country)
listaPaises
worldometer[grep("Saudi.*Arabia", worldometer$country),]$country
pais = listaPaises[i]
pais
1
pais
pais = gsub()
pais = gsub('\\s+', '.',pais)
pais
worldometer[grep("\\ ", worldometer$country),]$country
worldometer[grep("\\ ", worldometer$country),]$country = gsub('\\s+', '.',worldometer[grep("\\ ", worldometer$country),]$country)
full[grep("Korea", full$location),]$location[1]
names(dadosAtuais)[grep("Korea", colnames(dadosAtuais))]
worldometer[grep("Korea", worldometer$country),]$country[1]
worldometer = x$worldometer
worldometer[grep("Korea", worldometer$country),]$country[1]
worldometer[grep("USA", worldometer$country),]$country[1]
worldometer[grep("United.States", worldometer$country),]$country[1]
worldometer[grep("United States", worldometer$country),]$country[1]
worldometer$country
unique(worldometer$country)
unique(worldometer$country) %in% names(dadosAtuais)
worldometer[grep("\\ ", worldometer$country),]$country = gsub('\\s+', '.',worldometer[grep("\\ ", worldometer$country),]$country)
unique(worldometer$country) %in% names(dadosAtuais)
worldometer[worldometer$country %in% names(dadosAtuais),]$country
worldometer[worldometer$country !%in% names(dadosAtuais),]$country
worldometer[!worldometer$country %in% names(dadosAtuais),]$country
names(dadosAtuais)
as.list(names(dadosAtuais))
as.vector(names(dadosAtuais))
dataframe((names(dadosAtuais))
dataframe((names(dadosAtuais)))
as.data.frame((names(dadosAtuais)))
worldometer[!worldometer$country %in% names(dadosAtuais),]$country
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
as.data.frame((names(dadosAtuais)))
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
as.data.frame((names(dadosAtuais)))
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
as.data.frame((names(dadosAtuais)))
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
worldometer[worldometer$country == "UK",]$country = "United.Kingdom"
worldometer[worldometer$country == "USA",]$country = "United.States"
worldometer[worldometer$country == "S..Korea",]$country = "South.Korea"
worldometer[worldometer$country == "Czechia",]$country = "Czech.Republic"
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
as.data.frame((names(dadosAtuais)))
as.data.frame(worldometer[!worldometer$country %in% names(dadosAtuais),]$country)
worldometer[!worldometer$country %in% names(dadosAtuais),]$country
worldometer[worldometer$country %in% names(dadosAtuais),]
nrow(worldometer[worldometer$country %in% names(dadosAtuais),]$country)
nrow(worldometer[worldometer$country %in% names(dadosAtuais),])
worldometer[worldometer$country %in% names(dadosAtuais),]
source("conoravirus.r")
url <- paste0("https://www.worldometers.info/coronavirus/")
h <- read_html(url)
class(h)
worldometers <- h %>% html_nodes("table")
worldometers <- worldometers[[1]] %>% html_table
class(worldometers)
names(worldometers)[1] = "country"
paises = worldometers$country
worldometers = worldometers %>% mutate_all(funs(destring(., keep="0-9.-")))
worldometers$country = paises
worldometer[grep("\\ ", worldometer$country),]$country = gsub('\\s+', '.',worldometer[grep("\\ ", worldometer$country),]$country)
print(unique(worldometer$country))
as.data.frame((unique(worldometer$country))
)
url <- paste0("https://www.worldometers.info/coronavirus/")
h <- read_html(url)
class(h)
worldometers <- h %>% html_nodes("table")
worldometers <- worldometers[[1]] %>% html_table
class(worldometers)
names(worldometers)[1] = "country"
paises = worldometers$country
paises
as.data.frame(paises)
sort(as.data.frame(paises))
worldometers = worldometers %>% mutate_all(funs(destring(., keep="0-9.-")))
worldometers$country = paises
remove(paises)
paises
worldometer$country
remove(worldometer, worldometers)
source("conoravirus.r")
url <- paste0("https://www.worldometers.info/coronavirus/")
h <- read_html(url)
class(h)
worldometers <- h %>% html_nodes("table")
worldometers <- worldometers[[1]] %>% html_table
class(worldometers)
names(worldometers)[1] = "country"
paises = worldometers$country
worldometers = worldometers %>% mutate_all(funs(destring(., keep="0-9.-")))
worldometers$country =
worldometers$country
paises
source("conoravirus.r")
dev.off()
source("conoravirus.r")
estima(palpitesDe = "China", pais = "United.States", ndias = dias)
source("conoravirus.r")
dfPrevisao
dfPrevisao$location
source("full_data.r")
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
source("plot_semanal.r")
origem = "~/MEGA/Projetos/coronavirus/dados/datasets/full_data.csv"
destino = "~/MEGA/Projetos/coronavirus/dados/datasets/git/full_data.csv"
file.copy(origem, destino, overwrite = T)
source("plot_final_pais.r")
plotar()
plotar(tipo = "exp")
x = estima(palpitesDe = "World", pais = "Iran", ndias = dias, tipo="exp")
worldometer = x$worldometers
paises = worldometer$country
ndias = 7
for(i in 1:length(paises))  {
pais = paises[i]
cat("\nGerando para o pais: ", pais)
estima(palpitesDe = "China", pais = pais, ndias = dias)
estima(palpitesDe = "World", pais = pais, ndias = dias, tipo="exp")
}
source("todos.r")
dev.off()
source("todos.r")
dev.off()
x = estima(palpitesDe = "World", pais = "Nepal", ndias = dias)
x = estima(palpitesDe = "China", pais = "Nepal", ndias = dias)
tryCatch(
{
estima(palpitesDe = "China", pais = "Nepal", ndias = dias)
estima(palpitesDe = "World", pais = "Nepal", ndias = dias, tipo="exp")
plotar(tipo = "exp", paises = "Nepal")
},
error=function(cond) {
message(paste("Nao foi possivel processar: \n", cond))
})
tryCatch(
{
estima(palpitesDe = "China", pais = "Nepal", ndias = dias)
estima(palpitesDe = "World", pais = "Nepal", ndias = dias, tipo="exp")
plotar(tipo = "exp", paises = "Nepal")
},
error=function(cond) {
message(paste("\n\t\tNao foi possivel processar: \n", cond))
})
source("todos.r")
estima(palpitesDe = "World", pais = "United.Kingdom", ndias = dias, tipo="exp")
estima(palpitesDe = "World", pais = "United.States", ndias = dias, tipo="exp")
estima(palpitesDe = "China", pais = "United.States", ndias = dias)
estima(palpitesDe = "China", pais = "United.Kingdom", ndias = dias)
plotar(paises = "United.States")
plotar(paises = "United.States", tipo = "exp")
source("todos.r")
source("geralinks.r")
setwd("../../")
setwd("../../../../")
setwd("Projetos/coronavirus/")
source("geralinks.r")
conteudo = paste0(c("<!DOCTYPE html>","<html>", "<head>", "<body>", "<link rel='stylesheet' type='text/css' href='style.css' />"))
conteudo
conteudo = paste0(conteudo, "x")
conteudo
conteudo = paste0(conteudo, "x")
setwd("Projetos/coronavirus/")
