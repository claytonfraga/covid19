install.packages("neuralnet")
exit
quit()
quit()
Sys.setlocale(category = "LC_ALL", locale = "Portuguese_Portugal.1252")
sessionInfo()
Sys.setlocale(category = "LC_ALL", locale = "Portuguese_Brazil.1252")
localeToCharset()
locale
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
install.packages("shiny")
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
install.packages("dplyr")
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
install.packages("dplyr")
install.packages("dplyr", dependencies = T)
source("estima.r")
dias = 7
estima(palpitesDe = "China", pais = "Italy", ndias = dias)
library(shiny)
library(plotly)
library(moments)
library(shiny)
library(plotly)
library(moments)
install.packages("moments")
library(shiny)
library(plotly)
library(moments)
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
server()
server
dev.off()
server()
dev.off()
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
server <- function(input, output, session) {
startTime <- Sys.time()
# ...
}
View(server)
function(input, output, session) {
startTime <- Sys.time()
# ...
}
View(server)
server <- function(input, output, session) {
startTime <- Sys.time()
print(startTime)
}
server <- function(input, output, session) {
startTime <- Sys.time()
print(startTime)
}
library(shiny)
runExample("01_hello")
library(shiny)
library(plotly)
library(moments)
ui <- fluidPage(
h2("Prices and return rate"),
plotlyOutput("plot"),
h2("Histogram"),
h3("move mouse over line line plot"),
plotlyOutput("plot2")
)
server <- function(input, output) {
# Read and transform data
alltogether <- data.frame(read.csv(file = "./dji.csv", sep = ",", header = TRUE))
#change column names to simplify
colnames(alltogether) <- c("date","returns","prices")
# Generate statistic magic values
for (i in 3000:650){
n = i-649
alltogether$means[i] <- mean(alltogether$prices[n:i])
}
# render
output$plot <- renderPlotly({
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
range = c(-0.14,0.3)
)
p <- plot_ly() %>%
add_lines(data = alltogether, x = ~date, y = ~prices, name = "price", text = ~paste("mean: ", alltogether$means)) %>%
add_lines(data = alltogether, x = ~date, y = ~returns, name = "return", yaxis = "y2") %>%
layout(title = "Price and return rate", yaxis2 = ay)
})
output$plot2 <- renderPlotly({
d <- event_data("plotly_hover")
b <- d$pointNumber[1]
e <- b+649
rangy <- (alltogether$returns[b:e])
if (b > 649){
plot_ly(x=rangy,type = "histogram")
}
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='claytonfraga', token='51E6217FF8EC0642DF3F48C7A59BFFD4', secret='V+4KhPBCVdyRxMQ5nf/XmELsaTN52LdGzBRAic/Y')
load("/home/clayton/MEGA/Projetos/coronavirus/estimativa_dados_1603.RData")
require(plotly)
plotar <- function(tipo = "logistico", paises = c("Brazil","Spain", "United.States", "Italy", "World", "China", "Germany")) {
require(magrittr)
require(stringr)
cat(paste0("\n\tGerando grafico dinamico: ", paises, ", modelo:", tipo, "\n"))
hoje = Sys.Date()
for(i in 1:length(paises))  {
pais = paises[i]
dfPrevisao = read.csv(paste0("dados/datasets/",tipo,"_",tolower(pais),"_forecast_",hoje,".csv"), stringsAsFactors = F)
dfPrevisao = cbind(data.frame(location = rep("Italy", nrow(dfPrevisao))), dfPrevisao)
dfPrevisaoB = dfPrevisao[dfPrevisao$dias > as.Date("2020-03-01"),]
fig <- plot_ly(dfPrevisaoB, x = ~dias, y = ~pessimista, type = 'scatter', mode = 'lines',
line = list(color = 'transparent'),
showlegend = TRUE, name = 'Limite superior')
fig <- fig %>% add_trace(y = ~otimista, type = 'scatter', mode = 'lines',
fill = 'tonexty', fillcolor='rgba(0,100,80,0.2)', line = list(color = 'transparent'),
showlegend = TRUE, name = 'Limite inferior')
fig <- fig %>% add_trace(x = ~dias, y = ~casos_estimados, type = 'scatter', mode = 'lines+markers',
line = list(color='rgb(0,100,80)'),
name = 'Casos estimados')
fig <- fig %>% add_trace(y = ~casos_confirmados, name="Casos confirmados" , mode = 'markers')
titulo = paste0(str_replace_all(pais, "\\.", " "), " (",
format(min(dfPrevisaoB$dias), format = "%d/%m/%Y"),
" - ",
format(max(dfPrevisaoB$dias), format = "%d/%m/%Y"),
")"
)
fig <- fig %>% layout(title = titulo,
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
legend = list(x = 0.05, y = 0.95),
xaxis = list(title = "Dias",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Número de casos",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
#    fig
pais = pais = str_replace_all(pais, "\\.", "_")
arquivo = paste0("~/MEGA/Projetos/coronavirus/dados/datasets/git/docs/",pais,"_",tipo, ".html")
htmlwidgets::saveWidget(fig,
file = arquivo,
selfcontained = TRUE,
title = str_replace_all(pais, "\\.", " ")
)
diretorio = str_replace_all(arquivo, ".html", "_files")
if (dir.exists()) {
unlink(diretorio, recursive=TRUE)
}
plotar(paises = "Germany")
install.packages("geojsonio")
install.packages("geojsonio", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("tmaptools", dependencies = TRUE)
format(Sys.time(), format = "%d/%m/%Y")
format(Sys.time(), format = "%d/%m/%Y %M")
format(Sys.time(), format = "%d/%m/%Y %H:%M")
format(Sys.time(), format = "%d/%m/%Y %H:%M:%S")
load("/home/clayton/MEGA/Projetos/coronavirus/corononavirus.RData")
setwd(~/MEGA/Projetos/coronavirus/dados/datasets/git/docs/)
setwd("~/MEGA/Projetos/coronavirus/dados/datasets/git/docs/")
