breaks = trans_breaks("log2", function(x) 2^x))
nomeGrafico = paste0(pasta, "cases_financial_times2_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 8.5, units = "in",dpi = 100)
pasta = paste0(configuracao$pastaDropbox,"wide/")
nomeGrafico = paste0(pasta, "cases_financial_times_", hoje, ".jpg")
ggsave(nomeGrafico, width = 16, height = 9, units = "in",dpi = 100)
pasta = configuracao$pastaDocs
nomeGrafico = paste0(pasta,"cases_financial_times.jpg")
ggsave(nomeGrafico, width = 9, height = 6, units = "in",dpi = 100)
subtitulo = paste0("Fontes: ECDC (https://ourworldindata.org/coronavirus-source-data) e Worldometers")
ggplot(data = xxx, aes(x=day, y=casesrolling)) +
geom_line(aes(colour=location), size=1.2) +
ggtitle(paste0("Tendência de casos em ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%d/%m/%Y %H:%M")))+
xlab("Dias desde o terceiro caso dentre os países selecionados") +
ylab("log2(media movel para 7 dias)") + labs(color = "Países")  +
labs(subtitle=subtitulo) +
theme(
legend.position = "none",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5)
) +
geom_dl(aes(label = location,colour=location),
method = list(dl.combine( "last.points"), cex = 1.1,hjust=-0.2)) +
scale_x_continuous(breaks=seq(0, max(xxx$day)+5, 10), expand = expansion(mult = c(0, .10))) +
#TODO:
scale_y_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x))
nomeGrafico = paste0(pasta, "cases_financial_times2_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 8.5, units = "in",dpi = 100)
pasta = paste0(configuracao$pastaDropbox,"wide/")
nomeGrafico = paste0(pasta, "cases_financial_times_", hoje, ".jpg")
ggsave(nomeGrafico, width = 16, height = 9, units = "in",dpi = 100)
pasta = configuracao$pastaDocs
nomeGrafico = paste0(pasta,"cases_financial_times.jpg")
ggsave(nomeGrafico, width = 9, height = 6, units = "in",dpi = 100)
hoje
subtitulo = paste0("Fontes: ECDC (https://ourworldindata.org/coronavirus-source-data) e Worldometers")
ggplot(data = xxx, aes(x=day, y=casesrolling)) +
geom_line(aes(colour=location), size=1.2) +
ggtitle(paste0("Tendência de casos em ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%d/%m/%Y %H:%M")))+
xlab("Dias desde o terceiro caso dentre os países selecionados") +
ylab("log2(media movel para 7 dias)") + labs(color = "Países")  +
labs(subtitle=subtitulo) +
theme(
legend.position = "none",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5)
) +
geom_dl(aes(label = location,colour=location),
method = list(dl.combine( "last.points"), cex = 1.1,hjust=-0.2)) +
scale_x_continuous(breaks=seq(0, max(xxx$day)+5, 10), expand = expansion(mult = c(0, .10))) +
#TODO:
scale_y_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x))
nomeGrafico = paste0(pasta, "cases_financial_times2_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 8.5, units = "in",dpi = 100)
pasta = paste0(configuracao$pastaDropbox,"wide/")
nomeGrafico = paste0(pasta, "cases_financial_times_", hoje, ".jpg")
ggsave(nomeGrafico, width = 16, height = 9, units = "in",dpi = 100)
pasta = configuracao$pastaDocs
nomeGrafico = paste0(pasta,"cases_financial_times.jpg")
ggsave(nomeGrafico, width = 9, height = 6, units = "in",dpi = 100)
subtitulo = paste0("Fontes: ECDC (https://ourworldindata.org/coronavirus-source-data) e Worldometers")
ggplot(data = xxx, aes(x=day, y=casesrolling)) +
geom_line(aes(colour=location), size=1.2) +
ggtitle(paste0("Tendência de casos em ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%d/%m/%Y %H:%M")))+
xlab("Dias desde o terceiro caso dentre os países selecionados") +
ylab("log2(media movel para 7 dias)") + labs(color = "Países")  +
labs(subtitle=subtitulo) +
theme(
legend.position = "none",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5)
) +
geom_dl(aes(label = location,colour=location),
method = list(dl.combine( "last.points"), cex = 1.1,hjust=-0.2)) +
scale_x_continuous(breaks=seq(0, max(xxx$day)+5, 10), expand = expansion(mult = c(0, .10))) +
#TODO:
scale_y_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x))
pasta = paste0(configuracao$pastaDropbox,"brasil/")
nomeGrafico = paste0(pasta, "cases_financial_times2_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 8.5, units = "in",dpi = 100)
pasta = paste0(configuracao$pastaDropbox,"wide/")
nomeGrafico = paste0(pasta, "cases_financial_times_", hoje, ".jpg")
ggsave(nomeGrafico, width = 16, height = 9, units = "in",dpi = 100)
pasta = configuracao$pastaDocs
nomeGrafico = paste0(pasta,"cases_financial_times.jpg")
ggsave(nomeGrafico, width = 9, height = 6, units = "in",dpi = 100)
require(ggrepel)
require(directlabels)
require(RColorBrewer)
require(data.table)
require(lubridate)
require(ggplot2)
require(Fgmutils)
require(doBy)
require(plotly)
source("funcoes.r")
configuracao = getConfiguracoes()
hoje = Sys.Date() - configuracao$dias
cat("\nPlotando Tendência de obitos no Mundo ....")
dfInteresse = dfFulldata
dfInteresse = dfInteresse[dfInteresse$date >= as.Date("2020-01-01"),]
#dfInteresse = dfInteresse[dfInteresse$total_cases > 0,]
dfInteresse$date = as.Date(dfInteresse$date)
dff = dfInteresse
dff  = dfInteresse[dfInteresse$location %in%
c("Italy", "Spain", "China", "France", "Iran", "Turkey", "India", "Japan", "Austria", "Norway", "Australia",
"United.States","United.Kingdom", "Brazil", "Germany", "South.Korea")
,]
x = sqldf("SELECT location, min(date) as date from dff where new_deaths >=0 group by location")
x$date = as.Date(x$date)
xxx = sqldf("SELECT df1.* from dfInteresse df1, x df2
where df1.location=df2.location and df1.date>=df2.date
")
xxx[xxx$location=="China" & xxx$new_deaths==1290 ,]$new_deaths = 1
DT <- data.table(xxx)
DT[, day := sequence(.N)-1, by = c("location")]
xxx = as.data.frame(DT)
setDT(xxx)
setkey(xxx,location, day)
xxx[,deathsrolling:=round(as.numeric(get.mav(new_deaths,7)),1),by=location]
xxx = data.frame(xxx)
#xxx$deathsrolling = round(xxx$deathsrolling)
#xxx[xxx$deathsrolling==0,]$deathsrolling <- 1
x = sqldf("SELECT location, min(date) as date from xxx where deathsrolling >3 group by location")
xxx = sqldf("SELECT df1.* from xxx df1, x df2
where df1.location=df2.location and df1.date>=df2.date
")
xxx[xxx$location=="China" & xxx$deathsrolling<1 ,]$deathsrolling =1
DT <- data.table(xxx)
DT[, day := sequence(.N)-1, by = c("location")]
xxx = as.data.frame(DT)
subtitulo = paste0("Fontes: ECDC (https://ourworldindata.org/coronavirus-source-data) e Worldometers")
p = ggplot(data = xxx, aes(x=day, y=deathsrolling)) +
geom_line(aes(colour=location), size=1.2) +
ggtitle(paste0("Tendência de obitos em ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%d/%m/%Y %H:%M")))+
xlab("Dias desde o terceiro obito dentre os países selecionados") +
ylab("log2(media movel para 7 dias)") + labs(color = "Países")  +
labs(subtitle=subtitulo) +
theme(
legend.position = "none",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5)
) +
geom_dl(aes(label = location,colour=location),
method = list(dl.combine( "last.points"), cex = 1.1,hjust=-0.2)) +
scale_x_continuous(breaks=seq(0, max(xxx$day)+5, 10), expand = expansion(mult = c(0.1, .15))) +
#TODO:
scale_y_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x))
pasta = paste0(configuracao$pastaDropbox,"brasil/")
nomeGrafico = paste0(pasta, "deaths_financial_times2_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 8.5, units = "in",dpi = 100)
pasta = paste0(configuracao$pastaDropbox,"wide/")
nomeGrafico = paste0(pasta, "deaths_financial_times_", hoje, ".jpg")
ggsave(nomeGrafico, width = 16, height = 9, units = "in",dpi = 100)
pasta = configuracao$pastaDocs
nomeGrafico = paste0(pasta,"deaths_financial_times.jpg")
ggsave(nomeGrafico, width = 9, height = 6, units = "in",dpi = 100)
p = ggplot(data = xxx, aes(x=day, y=deathsrolling, key=new_deaths)) +
geom_line(aes(colour=location), size=1) +
ggtitle(paste0("Tendência de obitos em ", format(hoje format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%H:%M")))+
xlab("Dias desde o terceiro obito dentre os países selecionados") +
ylab("log2(media movel para 7 dias)") + labs(color = "Países")  +
labs(subtitle=subtitulo) +
theme(
legend.position = "right",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5)
) +
geom_dl(aes(label = location,colour=location),
method = list(dl.combine( "last.points"), cex = 1.1,hjust=-0.2)) +
scale_x_continuous(breaks=seq(0, max(xxx$day)+5, 10), expand = expansion(mult = c(0.1, .15))) +
#TODO:
scale_y_continuous(trans='log2',
breaks = trans_breaks("log2", function(x) 2^x))
plot = ggplotly(p, source = "select", tooltip = c("colour", "x","y","key"), dynamicTicks = TRUE)
#%>% layout(hovermode = "x")
plotaHTML(plot,
#plotaHTML(ggplotly(p,dynamicTicks = TRUE),
"deaths_financial_times2",
paste0("Tendência de obitos")
)
#layout(hovermode = "x")
setwd("~/MEGA/Projetos/coronavirus")
rm(list=ls())
t1 = Sys.time()
require(beepr)
require(rmarkdown)
require(taRifx)
require(Fgmutils)
require(minpack.lm)
require(hydroGOF)
require(lubridate)
require(gridExtra)
require(rvest)
require(tidyverse)
require(dplyr)
require(sqldf)
require(ggplot2)
require(RColorBrewer)
options(warn=-1)
options(width=200)
options(scipen=10000)
options(timeout= 4000000)
source("funcoes.r")
configuracao = getConfiguracoes()
dateCasos = max(read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv", stringsAsFactors = F)$date)
cat("\nData do arquivo 'total_cases.csv':", dateCasos, ", data atual: ", as.character(Sys.Date()))
options(timeout= 4000000)
hoje = Sys.Date() - configuracao$dias
cat("\n\n")
pasta = configuracao$pastaDados
pastaBackup = configuracao$pastaBackup
pastaRData = configuracao$pastaRData
pastaDatasets = configuracao$pastaDataset
dias = as.numeric(configuracao$diasEstimativa)
setwd("~/MEGA/Projetos/coronavirus")
rm(list=ls())
t1 = Sys.time()
require(beepr)
require(rmarkdown)
require(taRifx)
require(Fgmutils)
require(minpack.lm)
require(hydroGOF)
require(lubridate)
require(gridExtra)
require(rvest)
require(tidyverse)
require(dplyr)
require(sqldf)
require(ggplot2)
require(RColorBrewer)
options(warn=-1)
options(width=200)
options(scipen=10000)
options(timeout= 4000000)
source("funcoes.r")
configuracao = getConfiguracoes()
dateCasos = max(read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv", stringsAsFactors = F)$date)
cat("\nData do arquivo 'total_cases.csv':", dateCasos, ", data atual: ", as.character(Sys.Date()))
options(timeout= 4000000)
hoje = Sys.Date() - configuracao$dias
cat("\n\n")
pasta = configuracao$pastaDados
pastaBackup = configuracao$pastaBackup
pastaRData = configuracao$pastaRData
pastaDatasets = configuracao$pastaDataset
dias = as.numeric(configuracao$diasEstimativa)
ultimosDias = as.numeric(configuracao$ultimosDias)
dadosAtuais = read.csv("https://covid.ourworldindata.org/data/ecdc/total_cases.csv")
write.csv(dadosAtuais, file=paste0(pastaDatasets,"total_cases.csv"), row.names=F)
leWorldometers()
limpaDropbox()
source("estima.r")
dias = as.numeric(configuracao$diasEstimativa)
cat(paste0("\nExecutando: estima.r para ",dias," dias..."))
palpitesDe = "United.States"
x = estima(palpitesDe = palpitesDe, pais = "Brazil", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "Italy", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "Germany", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "China", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "Spain", ndias = dias)
x = estima(palpitesDe = palpitesDe, pais = "United.States", ndias = dias)
x = estima(palpitesDe = palpitesDe, pais = "United.Kingdom", ndias = dias)
x = estima(palpitesDe = palpitesDe, pais = "World", ndias = dias)
#    x = estima(palpitesDe = palpitesDe, pais = "Iran", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "France", ndias = dias)
#x = estima(palpitesDe = palpitesDe, pais = "Belgium", ndias = dias)
ifrm(x)
cat("\nExecutando: plotaDiasDobrar.r ...")
source("plotaDiasDobrar.r")
cat("\nExecutando: estimaCombinado.r ...")
source("estimaCombinado.r")
estimaCombinado()
cat("\nExecutando: estimaCombinado.r ...")
source("estimaCombinado.r")
estimaCombinado()
estimaCombinado(locations = c("Brazil", "United.States", "World", "United.Kingdom"))
gc()
cat("\nExecutando: ggplots.r ...")
source("ggplots.r")
gc()
cat("\nExecutando: ggplots.r ...")
source("ggplots.r")
gc()
cat("\nExecutando: ggplots.r ...")
source("ggplots.r")
require(ggrepel)
require(RColorBrewer)
require(data.table)
require(lubridate)
require(ggplot2)
require(Fgmutils)
require(doBy)
require(plotly)
options(warn=-1)
source("funcoes.r")
configuracao = getConfiguracoes()
hoje = Sys.Date() - as.numeric(configuracao$dias)
pasta = paste0(configuracao$pastaDropbox,"brasil/")
subtitulo = configuracao$fonte
source("full_data.r")
df = leWorldometers()
source("graficoMediaMovel.r")
source("graficoMediaMovelCases.r")
df = leWorldometers()
df = sqldf("SELECT country as location, NewCases as new_cases, NewDeaths as new_deaths,
TotalCases as total_cases, TotalDeaths as total_deaths
from df
where location <> ''
group by location"
)
require(ggrepel)
require(RColorBrewer)
require(data.table)
require(lubridate)
require(ggplot2)
require(Fgmutils)
require(doBy)
require(plotly)
options(warn=-1)
source("funcoes.r")
configuracao = getConfiguracoes()
hoje = Sys.Date() - as.numeric(configuracao$dias)
pasta = paste0(configuracao$pastaDropbox,"brasil/")
subtitulo = configuracao$fonte
source("full_data.r")
gc()
cat("\nExecutando: ggplots.r ...")
source("ggplots.r")
source("graficoMediaMovel.r")
source("graficoMediaMovel.r")
source("graficoMediaMovelCases.r")
gc()
cat("\nExecutando: ggplots.r ...")
source("ggplots.r")
dfRegiao = sqldf("
SELECT region, max(total_cases) as total_cases,max(total_deaths) as total_deaths
from dfBrasil
group by region
")
dfRegiao$percentual = (dfRegiao$total_cases / sum(dfRegiao$total_cases))*100
dfRegiao = dfRegiao  %>%  mutate(lab.ypos = cumsum(total_cases) - 0.5*total_cases)
dfBrasil = leDadosBrasil(padrao = FALSE, hoje=hoje)
dfRegiao = sqldf("
SELECT region, max(total_cases) as total_cases,max(total_deaths) as total_deaths
from dfBrasil
group by region
")
dfRegiao$percentual = (dfRegiao$total_cases / sum(dfRegiao$total_cases))*100
dfRegiao = dfRegiao  %>%  mutate(lab.ypos = cumsum(total_cases) - 0.5*total_cases)
hoje
source("funcoes.r")
configuracao = getConfiguracoes()
hoje = Sys.Date() - as.numeric(configuracao$dias)
hoje
cat("\nGerando graficos de pizza....")
dfBrasil = leDadosBrasil(padrao = FALSE, hoje=hoje)
dfRegiao = sqldf("
SELECT region, max(total_cases) as total_cases,max(total_deaths) as total_deaths
from dfBrasil
group by region
")
dfRegiao$percentual = (dfRegiao$total_cases / sum(dfRegiao$total_cases))*100
dfRegiao = dfRegiao  %>%  mutate(lab.ypos = cumsum(total_cases) - 0.5*total_cases)
# Basic piechart
ggplot(dfRegiao, aes(x="", y=total_cases, fill=region)) +
geom_bar(stat="identity", width=1, color="white") +
ggtitle(paste0("Percentual de casos por região ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%H:%M")))+
coord_polar("y", start=0) +
geom_text_repel(size=5,aes(label = paste0(region, "(",round(percentual),"%)")),
position = position_stack(vjust = 0.5)) +
labs(x = NULL, y = NULL, fill = NULL) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_void() +
theme(legend.position="none") +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, vjust = -3))  +
scale_fill_brewer(palette="Set1")
nomeGrafico = paste0(pasta, "pizza_percentual_brasil_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 7, units = "in",dpi = 100)
},
error=function(cond) {
cat(paste("\n\tNao foi possivel processar pizza_percentual_brasil_:", cond))
})
tryCatch(
{
# Basic piechart
ggplot(dfRegiao, aes(x="", y=total_cases, fill=region)) +
geom_bar(stat="identity", width=1, color="white") +
ggtitle(paste0("Percentual de casos por região ", format(hoje, format = "%d/%m/%Y"), " - gerado as ", format(Sys.time(), format = "%H:%M")))+
coord_polar("y", start=0) +
geom_text_repel(size=4,aes(label = paste0(region, "(",total_cases,")")),
position = position_stack(vjust = 0.5)) +
labs(x = NULL, y = NULL, fill = NULL) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_void() +
theme(legend.position="none") +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, vjust = -3))  +
scale_fill_brewer(palette="Set1")
nomeGrafico = paste0(pasta, "pizza_total_brasil_", hoje, ".jpg")
ggsave(nomeGrafico, width = 7, height = 7, units = "in",dpi = 100)
},
error=function(cond) {
cat(paste("\n\tNao foi possivel processar pizza_total_brasil_:", cond))
})
options(warn=0)
cat("\n\nGraficos gerados com sucesso!")
gc()
cat("\nExecutando: full_data.r ...")
source("full_data.r")
gc()
cat("\nExecutando: graficosLog.r ...")
source("graficosLog.r")
cat("\nExecutando: graficosLog.r ...")
source("graficosLog.r")
cat("\nExecutando: full_data.r ...")
source("full_data.r")
cat("\nExecutando: plot_final_pais.r ...")
source("plot_final_pais.r")
cat("\nExecutando: plot_final_pais.r ...")
source("plot_final_pais.r")
source("plot_final_pais.r")
gc()
plotarPaises()
plotarPaises(tipo = "exp")
plotarPaises(tipo = "combinado")
cat("\nExecutando: plot_semanal.r ...")
source("plot_semanal.r")
cat("\nExecutando: plot_paises.r ...")
source("plot_paises.r")
cat("\nExecutando: plot_mortes_paises.r ...")
source("plot_mortes_paises.r")
cat("\nExecutando: plot_mortes_semanais.r ...")
source("plot_mortes_semanais.r")
cat("\nExecutando: plot_mortes_semanais.r ...")
source("plot_mortes_semanais.r")
cat("\nExecutando: plot_mundo_semanal.r ...")
source("plot_mundo_semanal.r")
cat("\nExecutando: plot_mundo_semanal.r ...")
source("plot_taxacrescimento_mortalidade_semanal.r")
plot_letalidade(3)
plot_letalidade(5)
plot_letalidade(10)
cat("\nExecutando: plot_diferenca_mortes_semanal.r ...")
source("plot_diferenca_mortes_semanal.r")
cat("\nExecutando: plot_taxacrescimento_semanal.r ...")
source("plot_taxacrescimento_semanal.r")
cat("\nExecutando: plot_taxacrescimento_mortes_semanal.r ...")
source("plot_taxacrescimento_mortes_semanal.r")
cat("\nExecutando: plot_diferenca_mortos_mensal.r ...")
source("plot_diferenca_mortos_mensal.r")
cat("\nExecutando: plot_taxacrescimento_mensal.r ...")
source("plot_taxacrescimento_mensal.r")
cat("\nExecutando: plot_agregado.r ...")
source("plot_agregado.r")
tryCatch(
{
cat("\nExecutando: casosXpopulacao.r ...")
source("casosXpopulacao.r")
},
error=function(cond) {
message(paste("\n\t\tNao foi possivel processar: \n", cond))
})
cat("\nExecutando: processaWorldProjections.r ...")
source("processaWorldProjections.r")
cat("\nExecutando: processaWorldProjections_Logistico.r ...")
source("processaWorldProjections_Logistico.r")
cat("\nExecutando: processaWorldProjections.r ...")
source("processaWorldProjections.r")
cat("\nExecutando: processaWorldProjections_Logistico.r ...")
source("processaWorldProjections_Logistico.r")
cat("\nGerando estatisticas de comparacao dos modelos utilizados nas projecoes.r ...")
source("processaComparacaoModelosBarra.r")
cat("\nCopiando full_data ...")
origem = paste0(configuracao$pastaDataset, "full_data.csv")
destino = paste0(configuracao$pastaGit, "full_data.csv")
file.copy(origem, destino, overwrite = T)
gc()
if (horaDeProcessar()) {
cat("\nProcessando casos recuperados...")
source("todosRecuperados.r")
cat("\nProcessando casos de todos os paises...")
source("todos.r")
cat("\nProcessando dias para duplicacao...")
source("prototipoDiasDuplicacao2.r")
} else {
cat("\nAinda nao esta na hora de gerar graficos de pacientes recuperados e \nde todos os paises")
}
tryCatch(
{
cat("\nGerando mapas....")
source("mapaWorld2.r")
},
error=function(cond) {
cat(paste("\n\tNao foi possivel processar mapaWorld2:", cond))
})
cat("\nExecutando: horarioAtualizacao.r ...")
source("horarioAtualizacao.r")
cat("\nExecutando: geralinks.r ...")
source("geralinks.r")
cat("\nProcessamento coronavirus.r terminando em: ", format(Sys.time(), format = "%d/%m/%Y %H:%M:%S"), "\n")
removeBackup()
